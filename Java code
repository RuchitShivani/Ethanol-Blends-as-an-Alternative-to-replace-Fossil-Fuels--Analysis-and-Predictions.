import weka.classifiers.functions.LinearRegression;
import weka.classifiers.trees.RandomForest;
import weka.core.Instances;
import weka.core.converters.ConverterUtils.DataSource;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Normalize;

public class EthanolForecast {
    public static void main(String[] args) {
        try {
            // Load dataset
            DataSource source = new DataSource("renewable_energy.csv");
            Instances data = source.getDataSet();

            // Set target attribute (e.g., last column)
            if (data.classIndex() == -1)
                data.setClassIndex(data.numAttributes() - 1);

            // Normalize data
            Normalize normalize = new Normalize();
            normalize.setInputFormat(data);
            Instances normalizedData = Filter.useFilter(data, normalize);

            // Train Linear Regression Model
            LinearRegression lr = new LinearRegression();
            lr.buildClassifier(normalizedData);
            System.out.println("Linear Regression Model:\n" + lr);

            // Train Random Forest Model
            RandomForest rf = new RandomForest();
            rf.setNumIterations(100);
            rf.buildClassifier(normalizedData);
            System.out.println("Random Forest Model built successfully.");

            // Forecasting (dummy example)
            System.out.println("\n--- Predictions on Last 5 Rows ---");
            for (int i = normalizedData.numInstances() - 5; i < normalizedData.numInstances(); i++) {
                double lrPred = lr.classifyInstance(normalizedData.instance(i));
                double rfPred = rf.classifyInstance(normalizedData.instance(i));
                System.out.printf("Instance %d - LR: %.2f, RF: %.2f\n", i + 1, lrPred, rfPred);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
